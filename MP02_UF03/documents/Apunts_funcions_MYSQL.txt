Funcions MYSQL
==============
Les funcions programades per l'usuari es comporten igual que les funcions natives dels SGBD. Poden veure's d'igual manera com a caixes negres a les quals se'ls pot passar de zero a diversos paràmetres d'entrada, i retornen un únic valor de sortida. Per a il·lustrar com programar una funció senzilla, considerarem que necessitem unificar en una tercera columna, dues columnes numèriques que retorna una consulta SQL, de manera que la nova columna contingui el valor major d'entre les altres dues columnes. La funció ha de ser genèrica, és a dir, per a dos valors donats ha de determinar el major i retornar-ho com a resultat de l'operació.
En construir la funció s'han usat majúscules per a diferenciar els noms que tria el programador de les instruccions i per tant paraules reservades del llenguatge.
******************************
Codi_SQL.1
CREATE FUNCTION MAJOR (inValor1 int, inValor2 int) RETURNS int
BEGIN
 DECLARE outValorATornar int;
 IF inValor1 > inValor2 THEN
SET outValorATornar = inValor1;
 ELSE
SET outValorATornar = inValor2;
 END IF;
 RETURN outValorATornar;
END; 
******************************
Analitzant les parts del codi de la funció MAJOR.
inValor1 i inValor2 són els dos paràmetres d'entrada, per als quals ha d'especificar-se el tipus de dada, en aquest cas tots dos són de tipus INT. Veiem també a la capçalera de la funció com s'especifica el tipus de dada que retorna, en aquest cas tipus INT. Per tant la funció MAJOR rep dos enters com a paràmetres d'entrada, i retorna un enter com a resultat de l'operació o valor de sortida.
A continuació ve el bloc de codi entre les paraules reservades BEGIN i END, en aquest espai es programa la lògica que ha de realitzar la funció. La primera instrucció que apareix és una declaració de variable: outValorATornar, per a la qual deu també especificar-se el tipus de dada, en aquest cas també tipus INT. La variable té el propòsit de guardar el valor que la funció acabarà retornant.
Seguidament trobem la instrucció IF, que permet establir condicions.
En funció del resultat de la condició, que només pot ser cert o fals, es realitzen unes accions o unes altres. En aquest cas s'observa com la instrucció IF compara els paràmetres d'entrada entre si de manera que si inValor1 és major que inValor2, llavors s'executa la instrucció SET que hi ha dins del IF, és a dir, s'assigna el valor que conté inValor1 a la variable outValorATornar. Si per contra la condició resulta ser falsa, en lloc d'executar-se la instrucció que hi ha dins del IF s'executarà la que hi ha dins del ELSE, i s'assignarà el valor que conté inValor2 a la variable outValorATornar.
Al final de tot està la instrucció RETURN que retorna el contingut de la variable outValorATornar prèviament calculat i finalitza l'execució de la funció.
Vegem a continuació una aplicació de la funció MAJOR. 
******************************
Codi_SQL.2
select MAJOR(34, 27) 
******************************
MAJOR(34, 27)
34
******************************
Aplicat a dues columnes d'una consulta:
******************************
Codi_SQL.3
select ID_ALUMNO,
ID_CURSO,
MAJOR(ID_ALUMNO, ID_CURSO) as MAJOR
 from ALUMNOS_CURSOS 
******************************
ID_ALUMNO ID_CURSO MAJOR
1 1 1
3 1 3
5 1 5
4 2 4
1 3 3
5 3 5
2 4 4
6 4 6
******************************

Funció amb accés a dades
******************************
La següent funció d'exemple MySQL calcula la suma de salaris de la taula TREBALLADORS, té un paràmetre d'entrada per a indicar-li el departament dels treballadors que s'han de considerar per realitzar el càlcul. Però si no s'especifica el departament, o cosa que és el mateix, la invoquem passant-li un valor nul, calcula la suma de salaris de tota la taula.
******************************
Codi_SQL.5
```sql

DELIMITER //

USE empresa //

DROP FUNCTION IF EXISTS f_sumaSous //

CREATE FUNCTION f_sumaSous(pi_responsable  smallint)
    RETURNS float
    BEGIN
        DECLARE pa_sumaSous float;

        SELECT sum(SOU_TREB)
            INTO pa_sumaSous 
        FROM TREBALLADORS
        WHERE CAP_TREB=pi_responsable
                OR pi_responsable IS NULL;  -- OR ISNULL(pi_responsable);
        
        RETURN pa_sumaSous;
    END //

DELIMITER ;
******************************
Fixeu-vos com en la consulta que conté la funció apareix una clàusula que ja s'havia tractat amb anterioritat, la clàusula **`INTO`**. Com amb els Storage Procedures, té el propòsit d'assignar els valors que retorna la consulta a variables per al seu tractament o ús. En aquest cas la suma de salaris que retorna la consulta s'assigna a la variable **`pa_sumaSous`**, que s'usa com a valor de retorn de la funció. Si en la clàusula **`SELECT`** apareixen més columnes o camps, haurà d'especificar en la clàusula **`INTO`** una variable per a cada columna que indiqui en la clàusula **`SELECT`**, separant una variable d'una altra per comes. Aquestes variables han de ser del mateix tipus que el valor que retorna la consulta en la seva columna corresponent. Si aquestes consultes retornen més d'una sola fila de resultat, si retornen dos o més es produeix un error en temps d'execució, atès que no és possible assignar a una variable els valors de diverses files de resultat. En aquest cas caldria fer servir un cursor de MySQL.
Provem el bon funcionament de la funció **`f_sumaSous`** mitjançant la següent consulta:
******************************
Codi_SQL.6
select 'Hombres' as AMBITO,
f_sumaSous('H') as TOTAL_SALARIOS
 union
select 'Mujeres', f_sumaSous('M')
 union
select 'Todos', f_sumaSous(null) 
******************************
AMBITO TOTAL_SALARIOS
Hombres 2900
Mujeres 2625.5
Todos 5525.5
******************************
Si usted recuerda el ejercicio que plantea el cálculo del porcentaje que cobra cada empleado sobre el total de salarios, tendrá presente que se resolvió de dos modos: con una subconsulta en la cláusula SELECT, y con una subconsulta en la cláusula FROM.
Se expone en esta ocasión una solución basada en la llamada a la función f_sumaSous. 
******************************
Codi_SQL.7
select NOMBRE,
APELLIDOS,
SALARIO / suma_salarios(null) * 100 as PORCENTAJE
 from EMPLEADOS 
******************************
Otro problema que se planteó era el mismo cálculo pero considerando la suma de salario de las mujeres si el empleado es mujer, y la suma de salarios de los hombres si el empleado es hombre. La siguiente consulta resuelve este cálculo haciendo uso de la función f_sumaSous. 
******************************
Codi_SQL.8
select NOMBRE,
APELLIDOS,
SALARIO / suma_salarios(SEXO) * 100 as PORCENTAJE
 from EMPLEADOS 
******************************
ANÁLISIS DESCENDIENTE
Los procedimientos y funciones resultan de gran ayuda para organizar el código.
Por ejemplo, usted puede necesitar programar un procedimiento que realice una tarea tal que requiera de cientos de líneas de código. Es aconsejable dividir el problema en apartados más pequeños, es decir, en subtareas que programará en diversos procedimientos y funciones para después desde un procedimiento o función principal ir invocando cada uno ellos en el orden adecuado, teniendo así el algoritmo que resuelve su problema mejor organizado. De este modo usted tendrá un código más ordenado y le resultará más cómodo su mantenimiento.
El análisis descendiente es un estudio previo a la programación que divide en tareas más pequeñas el algoritmo en su conjunto. Una vez dividido el problema se realiza la programación de cada una de estas partes. Por último se programa el procedimiento o función principal que usará cada una de estas partes previamente programadas.
Veamos un símil de análisis descendiente en el mundo culinario: cocinar un pastel.
Se trata de una tarea que podemos dividir en varias subtareas: 
1. Preparar molde
2. Preparar ingredientes
3. Mezclar ingredientes
4. Elaborar masa
5. Llenar molde
6. Hornear molde
Cada una de estas subtareas se invocaría desde el procedimiento principal, que programaremos en pseudocódigo, del siguiente modo. 
******************************
VIDEOJUEGO
Realicemos ahora en MySQL un ejemplo de análisis descendiente considerando el siguiente videojuego: acertar el número secreto. Para ello vamos a suponer que enemos una tabla JUEGO, con cinco campos: ID_JUEGO, JUGADOR, NUMERO, INTENTOS y FINALIZADO, esta tabla contiene por ID_JUEGO un registro con el número secreto en el campo NUMERO y los intentos de acertarlo se van almacenando en el campo INTENTOS. El número secreto es un entero comprendido entre 0 y 999. Cada vez que el jugador aventure un número como solución, el juego debe responder si el número secreto es mayor al propuesto o bien es menor. En el caso de que el número propuesto sea igual al número secreto el juego acaba y se muestra el número de intentos que ha necesitado el jugador para acertarlo, además se actualizará el campo FINALIZADO del juego en curso.
Dividamos el problema en subtareas.
1. Obtener juego (determina el juego en curso para un jugador, si no lo hay crea una nueva partida)
2. Obtener número secreto (obtiene el número secreto del juego en curso)
3. Incrementar intento (actualiza el número de intentos del juego en curso y devuelve los intentos realizados hasta el momento)
4. Finalizar juego (actualiza el campo FINALIZADO del juego en curso)
Empecemos a programar cada una de estas subtareas: 

******************************
Codi_SQL.13
CREATE FUNCTION OBTENER_JUEGO(P_JUGADOR char(30))
RETURNS int
BEGIN
 DECLARE V_JUEGO int;
 -- si no existe registro a V_JUEGO se le asigna nulo.
 select ID_JUEGO
 into V_JUEGO
 from JUEGO
 where JUGADOR = P_JUGADOR
and FINALIZADO = 'N';
 IF V_JUEGO is null THEN
insert into JUEGO(JUGADOR, NUMERO)
values (P_JUGADOR, round ( rand() * 999 ));
select last_insert_id()
into V_JUEGO; 
******************************
Para generar números aleatorios se usa la función RAND. Observe también como en el INSERT no se especifican todos los valores para todos los campos de la tabla JUEGO. Esto es debido a que se han definido valores por defecto al construir la tabla para los campos INTENTOS y FINALIZADO, que se inserta un cero y una ‘N’ respectivamente. Además el campo ID_JUEGO se ha definido como AUTO_INCREMENT, esto es una particularidad de MySQL que de forma automática encuentra valores para el campo ID_JUEGO que es clave primaria y los asigna para cada inserción. El modo de saber qué identificador ha asignado al nuevo registro es mediante la función LAST_INSERT_ID. 
******************************
Codi_SQL.14
CREATE FUNCTION OBTENER_NUMERO(P_JUEGO int) RETURNS int
BEGIN
 DECLARE V_NUMERO int;
 select NUMERO
 into V_NUMERO
 from JUEGO
 where ID_JUEGO = P_JUEGO;
 RETURN V_NUMERO;
END; 
******************************
Codi_SQL.15
CREATE FUNCTION INCREMENTAR_INTENTOS(P_JUEGO int) RETURNS int
BEGIN
 DECLARE V_INTENTOS int;
 update JUEGO
SET INTENTOS = INTENTOS + 1
 where ID_JUEGO = P_JUEGO;
 select INTENTOS
 into V_INTENTOS
 from JUEGO
 where ID_JUEGO = P_JUEGO;
 RETURN V_INTENTOS;
END; 
******************************
Codi_SQL.16
create procedure FINALIZAR_JUEGO(P_JUEGO int)
BEGIN
 update JUEGO
SET FINALIZADO = 'S'
 where ID_JUEGO = P_JUEGO;
END; 
******************************
Ahora una vez programadas todas las partes vamos a programar la función principal usando cada una de ellas para programar el videojuego. Necesitamos pasarle a esta función principal dos parámetros: el jugador, que es un nombre cualquiera que fijaremos al empezar una partida, y el número que aventuramos como solución. Para próximos intentos del mismo juego deberemos pasarle el mismo nombre de jugador, de lo contrario el algoritmo abrirá un nuevo juego.
******************************
Codi_SQL.17
CREATE FUNCTION NUMERO_SECRETO(P_JUGADOR char(30),
P_NUMERO int)
RETURNS char(200)
BEGIN
 DECLARE V_JUEGO int;
 DECLARE V_NUMERO int;
 DECLARE V_INTENTOS int;
 DECLARE outValorATornar char(200);
 -- control de parametros de entrada
 IF P_JUGADOR is null THEN
RETURN 'Debe indicar un nombre de jugador';
 elseif not (P_NUMERO >= 0 and P_NUMERO < 1000)
or P_NUMERO is null THEN
RETURN 'Debe indicar un numero entre 0 y 999';
 END IF;
 SET V_JUEGO = OBTENER_JUEGO(P_JUGADOR);
 SET V_NUMERO = OBTENER_NUMERO(V_JUEGO);
 SET V_INTENTOS = INCREMENTAR_INTENTOS(V_JUEGO);
 IF V_NUMERO = P_NUMERO THEN
call FINALIZAR_JUEGO(V_JUEGO);
SET outValorATornar = concat('Correcto, ha necesitado ',
V_INTENTOS, ' intentos');
 ELSE
IF V_NUMERO < P_NUMERO THEN
SET outValorATornar = 'El número secreto es menor que';
elseif V_NUMERO > P_NUMERO THEN
SET outValorATornar = 'El número secreto es mayor que';
END IF;
SET outValorATornar = concat(outValorATornar, ' ', P_NUMERO, 
'. Intentos: ', V_INTENTOS);
 END IF;
 RETURN outValorATornar;
END; 
******************************
Y ahora vamos a jugar: 
******************************
Codi_SQL.18
select NUMERO_SECRETO('test', 500) 
******************************

******************************
******************************
******************************